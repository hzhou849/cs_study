File:Makerfile

# You can modify the below as well, but probably
# won't need to.
#

# CC is for the name of the C compiler. CPPFLAGS denotes pre-processor
# flags, such as -I options. CFLAGS denotes flags for the C compiler.
# CXXFLAGS denotes flags for the C++ compiler. You may add additional
# settings here, such as PFLAGS, if you are using other languages such
# as Pascal.


#--------------------------------------------------------------------
#		Makerfile for Unix systems
# 		Using a GNU C compiler
#---------------------------------------------------------------------

# OBJS = MovieList.o Movie.o NameList.o Name.o Iterator.o
# CC = g++
# DEBUG = -g
# CFLAGS = -Wall -c $(DEBUG)
# LFLAGS = -Wall $(DEBUG)

# p1 : $(OBJS)
#     $(CC) $(LFLAGS) $(OBJS) -o p1

# MovieList.o : MovieList.h MovieList.cpp Movie.h NameList.h Name.h Iterator.h
#     $(CC) $(CFLAGS) MovieList.cpp

# Movie.o : Movie.h Movie.cpp NameList.h Name.h
#     $(CC) $(CFLAGS) Movie.cpp

# NameList.o : NameList.h NameList.cpp Name.h 
#     $(CC) $(CFLAGS) NameList.cpp

# Name.o : Name.h Name.cpp 
#     $(CC) $(CFLAGS) Name.cpp

# Iterator.o : Iterator.h Iterator.cpp MovieList.h
#     $(CC) $(CFLAGS) Iterator.cpp

# clean:
#     \rm *.o *~ p1

# tar:
#     tar cfv p1.tar Movie.h Movie.cpp Name.h Name.cpp NameList.h \
#             NameList.cpp  Iterator.cpp Iterator.h


CC=gcc
CFLAGS= -Wall -c 
#debugger CFLAGS = -g 
# additional libraries to be include during compile. 
#LDFLAGS = lpthread -lm 

# Compiler Flags:
#				-g 		--enable debugging
#				-Wall	--Turn on all warnings
#				-D__USE_FIXED PROTOTYPES__
#						-- Force the compiler to use the correct headers
#				-ansi	-- Don't use GNU extensions. Stick to ansi C.


# the most common error in writing a makefile is failing to put a TAB at the beginning of commands.
# creates tester.o file
tester.o: test.c test.h
	$(CC) $(CFLAGS) -c test.c

# '\' prevents rm from yelling at you if there are no files to delete
clean:
	\rm *.o test
