
==============================================================
 COMMANDS
==============================================================

#Resetting repository
"git reset --hard HEAD~1"
followed by

"git push --force origin branch"



tips for creating new repos.
- if creating a new repository, just create it on github.com website
then in terminal 
"git clone https://github.com/hzhou849/cs_study.git"
 - this is much easier than using all the extra steps below



git clone --recursive ssh://git@stash:7adf99/asdfadf/adsfadf.git

git branch - to verify the branch currently set to

git checkout /prototype/gpio-diagnostics *critical step to get files

…or create a new repository on the command line

origin = the remote name -setup automatically when we cloned the repo from github. refers to github copy of our repo
master = name of the branch  to push

echo "# github-demo" >> README.md
git init (initialize current directory)
git add README.md  --> puts in staging area
git commit -m "first commit" --> puts in local repo
git remote add origin https://github.com/user849/github-demo.git (adds remote access to online repo)
git push -u origin master -- pushes commit to online repo
…or push an existing repository from the command line

git remote add origin https://github.com/username849/github-demo.git
git push -u origin master

https://github.com/user849/github-demo.git

/* to initialize new folder/project  */
*exclude "--global" so the account scope is only for the active folder
since this account is for testing  only use

 	git config user.email "your@email.com"
	git config user.name " Your name"

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

confirm:
	git config --global --list
 

/* commit */
git commit -am "comment " - commits any modified files


/* to set your account's default identity. */

Omit --global to set the identity only in this repository.

~/.ssh/config file configuration:
# github account
Host github.com-test github.com
    Hostname github.com
    User git 
    IdentifyFile ~/.ssh/id_rsa_test.pub


/* method 2 quick add new files: */

git add . (for all files recursively from current directory/master to add)

git add file.txt ==> staging area
git commit -m "Adding new file" ==> local repo

--> ** good practice to do a git pull before pushing
git push origin master ==> push to online repo
 	- should ask for login information

** to skip add and 1step commit (must be tracked files)
git commit -am "Adding more syntax.."


/* QUICK CREATE NEW PROJECT FROM TERMINAL*/
git init fresh-project

/* REMOVE A PROJECT  */
rm -rf new_project/
 **	if delete .git folder, folder with turn back to normal folder


/* PULLS */
	- this will  pull from the repository (online) and also update the local 
	- should do a pull before a push back into an online repo in case you want 
	  want to update with the newest changes
 	- useful to help sync if there are multiple developers working on the same repo

'git pull origin master'
or just 'git pull'


/* SHOW TRACKED FILES */
git ls-files


/* BACKING OUT CHANGES */
to back out changes after committing:
after added but NOT committed:
1.	- "git reset HEAD <file>..." to unstage (removes form committed/staging to working directory
2. then, - "git checkout -- <file>..." to discard changes in working directory)
git status should reflect changes and file(s) changed/modified should be back to previous state


/* RENAMING FILES */
git mv file3.txt <existing_file> <new name>

	- if you use terminal bash mv command to change filenames, git sees this as 2 operations (delete and copy)
	- to add this properly use 'git add -A' (-A =>add recursively any changes, update any files that have been add, moved,deleted)

you may have to use 'git add -u' if modification is done through OS and not git, so git understands we renamed a file and not 
just added a file. a change  to update the index 



/* DELETEING FILES */

git rm <filename> (note: this can only delete tracked files)



/* HISTORY */

HEAD = last commit in current branch
git log --oneline : shows log summary of all commit changes
git dif <hashcommitID#1> <hashcommitID#2> or HEAD
git log
git log --abbrev-commit (shorter hash)
git log --oneline --graph --decorate

git log hash1...hash2
git log --since="3 days ago"
git log -- filename.txt

filed renamed
git log --follow -- pathtofile/level1/text.txt

show changes of individual files
git show <hashValue>


/* Aliasing */
create a macro for long commands
example:
git config --global alias.<alias_name> "<the command you want to macro> "
git config --global alias.hist "log --all --graph --decorate --oneline"

to execute:
 git <alias_name>

to see the aliases you have created, open the .gitconfig file with a text editor.


/* Ignore/exclude unwanted files from repo */

create a '.gitignore' file and add names of files you want to ignore.

ie ".DS_Store
    file_to_ignore.txt
    folder/ "

==============================================================
 COMPARISONS
==============================================================
/* comparing working directory and staging area */ 

working directory* | staging area* | Repository(.git folder) 

git diff 
or specify the filename yourself:
git diff <filename> 

git difftool (if visual tool is installed on system)



/* comparing working directory and git repository */
wd* | sa | repo*


git diff HEAD

/*comparing staging area and git repository */
wd | sa* | repo*

git diff --staged HEAD



/* COMPARING BETWEEN COMMITS */
HEAD = last commit in current branch
git log --oneline : shows log summary of all commit changes
git dif <hashcommitID#1> <hashcommitID#2> or HEAD

/* COMPARING BETWEEN LOCAL AND REMOTE MASTER BRANCHES */

- master = local repo
- origin/master = remote repo (online)

git diff master origin/master 



==============================================================
 BRANCHING
==============================================================

/* Branching Basics */

git branch -a 
- display existing branches  both local and remote


/* Create a new branch */
git branch <newBranchName>
git checkout <newBranchName>
- *NOTE: this only creates, you must use git checkout to switch to new branch

 -ONE line create and switch:
	git checkout -b <new_branch_name>


/* Switching to new branch */
git checkout <branch_name>


/* Renaming a branch */
git -m <existing_branch> <new_branch_name>


/* Push the branch on github */
git push origin <name_new_branch>

/* Delete a branch  */

*Note: cannot delete a branch you are currently on

locally:
git branch -d <branch_name>

remote:
git push <remote_name(origin)> :<branch_name>
ie. git push origin :new_branch1


==============================================================
 MERGING
==============================================================
/* Merge the new branch (FAST-FORWARD merge) */

 - fast forward merges are only possible if there are no commits on the master pending
 - merging the branch will merge the desired branch to the master copy and delete the branch

*type this command in the branch you want the newbranch to merge with ie master
git merge <name_branch>

/* Merging (NO Fast-Forward) */

git merge <branch_name> --no-ff



To view log
git log --oneline 
git log (full verbose)

git branch --delete <branch_name>


-------------------------------------------------------
# Staging: Add
-------------------------------------------------------
git add -A stages all changes

git add . stages new files and modifications, without deletions (on the current directory and its subdirectories).

git add -u stages modifications and deletions, without new files


git add -A (all files)
or 
git add <name.file> for individual files

# To unstage a file that you added by accident
git rm --cached index.html

-------------------------------------------------------
# COMMIT
commit saves the snapshot of the current code in the log
-------------------------------------------------------
git commit -m "my message version x.x.1"



------------------------------------------------------
# PUSH
------------------------------------------------------
git push -u origin master
or
git push 


------------------------------------------------------
# Rolling back
------------------------------------------------------
 Three methods of reverting with different saftey levels

 1) Checkout (Low danger)
  - git checkout <hash_code) to checkout a timeline from the log
  - Note: This is read only mode
  - When done, just checkout the master branch to go back to current state

 2) Revert (safe but can be misued)
 * Git Revert is not a full revert in the desired has timeline.
 it will the changes in that hash_code

Think of revert as an "UNDO" of the selected hash timeline.

 example1.

 log weragff "bad commit"
 log abcdefg "commit1"

 BOTH DO THE SAME
 to use, git revert HEAD - will automatically undo all current changes in the current timeline
 or type git revert weragff - will undo all the bad changes in this timeline by rolling back to timeline previous, in this case abcdefg timeline will be restored

 git revert <hash_code>

 this will add/copy a new commit with the hash-timeline you want to the
 top of the log.

 example 2:
		 76450c8 added newfile2
		 eafea22 added newfile1; testing
		 a1e9b29 commit version 0.0.3
		 4556f0e commit version 0.0.2
		 c88e92a commit version 0.0.1
		 116e29e commit 2
		 97ea974 initial commit
		 18bea9b Initial commit



 if we are in the most current timeline of 76450c8:
 i) git revert eafea22 - will delete the adding of newfile1 and testing  and create a new 	timeline (cf71e5b)
 added-->cf71e5b Revert "added newfile1; testing"
		76450c8 added newfile2
	  * eafea22 added newfile1; testing
		a1e9b29 commit version 0.0.3
		4556f0e commit version 0.0.2
		c88e92a commit version 0.0.1
		116e29e commit 2
		97ea974 initial commit
		18bea9b Initial commit

 ii) git revert a1ee9b29 - will delete version 0.0.3 changes and restore v.0.0.2 (timeline 4556f0e) but will keep everything after v003(a1e9b29) - think, everything before and after hash is kept,  so a1ee9b29 v003 will be removed.

 or you can think of it as git "delete all changes of a1e9b29" from the timeline 
 
	git revert a1e9b29, version 0.0.2 4
	--> a9fb3e2 Revert "commit version 0.0.3"
		76450c8 added newfile2
		eafea22 added newfile1; testing
	  * a1e9b29 commit version 0.0.3
		4556f0e commit version 0.0.2
		c88e92a commit version 0.0.1
		116e29e commit 2
		97ea974 initial commit
		18bea9b Initial commit




 3) Reset
 git reset <hash_code>
  - this will delete all timelines after this hash_code, but will keep 
    all the most current code, so you can commit the code if you want.

 git reset <hash_code> --hard
  - this will do a full rewind and delete all changes upto desired point.



