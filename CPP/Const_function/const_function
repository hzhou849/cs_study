A function becomes const when the const keyword is used in the functionâ€™s declaration. 
The idea of const functions is not to allow them to modify the object on which they are called. 
It is recommended the practice to make as many functions const as possible so that accidental changes to objects are avoided.

Following is a simple example of a const function.


#include<iostream> 
using namespace std; 
  
class Test { 
    int value; 
public: 
    Test(int v = 0) {value = v;} 
      
    // We get compiler error if we add a line like "value = 100;" 
    // in this function. 
    int getValue() const 
	{
	   value = 100; // will cause compile error since this is a const function
	   return value;
	}   
}; 
  
int main() { 
    Test t(20); 
    cout<<t.getValue(); 
    return 0; 
} 
Output:

20
When a function is declared as const, it can be called on any type of object. Non-const functions can only be called by non-const objects.
